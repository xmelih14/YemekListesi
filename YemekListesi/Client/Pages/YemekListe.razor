@page "/"

<h3>Haftalık Yemek Listesi</h3>

<table class="table">
    <thead>
        <tr>
            <th>Gün</th>
            <th>Yemekler</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>().Where(d => d != DayOfWeek.Saturday && d != DayOfWeek.Sunday))
        {
            <tr>
                <td>@GetTurkishDayName(day)</td>
                <td>
                    <ul>
                        @foreach (var meal in GetMealsForDay(day))
                        {
                            <li>@meal</li>
                        }
                    </ul>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    // Örnek veri: Haftalık yemek listesi
    Dictionary<DayOfWeek, List<string>> weeklyMeals = new Dictionary<DayOfWeek, List<string>>
    {
        { DayOfWeek.Monday, new List<string> { "Köfte", "Pilav", "Yoğurt" } },
        { DayOfWeek.Tuesday, new List<string> { "Tavuk Sote", "Bulgur Pilavı", "Çorba" } },
        { DayOfWeek.Wednesday, new List<string> { "Izgara Balık", "Patates Püresi", "Salata" } },
        { DayOfWeek.Thursday, new List<string> { "Mantı", "Yoğurt", "Salata" } },
        { DayOfWeek.Friday, new List<string> { "Pizza", "Makarna", "Salata" } }
    };

    // Verilen gün için yemek listesini al
    List<string> GetMealsForDay(DayOfWeek day)
    {
        return weeklyMeals.ContainsKey(day) ? weeklyMeals[day] : new List<string>();
    }

    // Gün isimlerini Türkçe olarak döndür
    string GetTurkishDayName(DayOfWeek day)
    {
        switch (day)
        {
            case DayOfWeek.Monday: return "Pazartesi";
            case DayOfWeek.Tuesday: return "Salı";
            case DayOfWeek.Wednesday: return "Çarşamba";
            case DayOfWeek.Thursday: return "Perşembe";
            case DayOfWeek.Friday: return "Cuma";
            default: return "";
        }
    }
}
